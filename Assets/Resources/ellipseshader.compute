#pragma kernel Clear
#pragma kernel CSMain
#pragma kernel CSDebug

RWTexture2D<float4>    _Output;
StructuredBuffer<float2> _Points;
int                    _PointCount;
int                    _RadiusX;
int                    _RadiusY;
float4                 _PointColor;

[numthreads(8,8,1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
    // 清空为透明
    _Output[id.xy] = float4(0,0,0,0);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 pixel = float2(id.x, id.y);
    float4 col   = float4(0,0,0,0);
    for (int i = 0; i < _PointCount; ++i)
    {
        float2 dif = pixel - _Points[i];
        float nx = dif.x / _RadiusX;
        float ny = dif.y / _RadiusY;
        if (nx*nx + ny*ny <= 1.0)
        {
            col = _PointColor;
            break;
        }
    }
    _Output[id.xy] = col;
}

[numthreads(8,8,1)]
void CSDebug(uint3 id : SV_DispatchThreadID)
{
    float2 pixel = float2(id.x, id.y);
    // 只写入命中点，跳过其他像素以保留背景
    for (int i = 0; i < _PointCount; ++i)
    {
        float2 dif = pixel - _Points[i];
        float nx = dif.x / _RadiusX;
        float ny = dif.y / _RadiusY;
        if (nx*nx + ny*ny <= 1.0)
        {
            _Output[id.xy] = _PointColor;
            return;
        }
    }
}